#!/usr/bin/env ruby
# frozen_string_literal: true

# Copyright (C) 2017 Dimitri Arrigoni <dimitri@arrigoni.me>
# License GPLv3+: GNU GPL version 3 or later
# <http://www.gnu.org/licenses/gpl.html>.
# This is free software: you are free to change and redistribute it.
# There is NO WARRANTY, to the extent permitted by law.

require 'fileutils'
require 'pathname'
require 'yaml'
require 'pp'

# Installer class
#
# compatible with wicd-gtk version >= 1.7
class Installer
  attr_reader :srcdir
  attr_reader :flavour

  class << self
    def install(flavour = :light)
      self.new(flavour || :light).install
    end
  end

  def initialize(flavour = :light)
    @flavour = flavour
    @srcdir  = Pathname.new(__dir__).join('src')

    raise ArgumentError.new('Invalid flavour: %s' % flavour) unless flavour?
  end

  def flavour_directory
    srcdir.join('flavours', flavour.to_s)
  end

  def flavour?
    flavour_directory.directory?
  end

  def manifest
    @manifest ||= YAML.load_file(Pathname.new(__dir__).join('manifest.yml'))

    @manifest
  end

  def install
    prepare.install_statuses.clean
    install_hicolor
    install_launcher

    self
  end

  def install_statuses
     formats = [
      16, 22, # samll
      24, 32, 36, 48, 'original' # big
    ]

     get_status_directories_by_formats(formats).each do | dir|
       FileUtils.mkdir_p(dir, verbose: true)
     end

    formats.each do |size|
      get_status_paths(size).each do |k, v|
        next unless k.exist?

        FileUtils.rm_f(k)
        FileUtils.cp(v, k, verbose: true)
      end
    end

    self
  end

  def install_launcher
    source = srcdir.join('wicd.desktop')
    (manifest.fetch('paths')['applications'] || {}).to_a.each do |target|
      target = Pathname.new(target).join(source.basename)

      next unless target.exist? and target.file?

      FileUtils.cp(source, target, verbose: true)
    end

    self
  end

  # Install app icons
  #
  # @return [self]
  def install_hicolor
    icons_dir = srcdir.join('apps')
    remove_pixmap = false

    Dir.chdir(icons_dir) do
      Dir.glob(['*/*.png', '*/*.svg'])
         .map { |path| Pathname.new(path) }
         .each do |icon|
        format = icon.dirname.to_s
        fname = icon.basename

        (manifest.fetch('paths')['icons_hicolor'] || {}).to_a.each do |target|
          target = Pathname.new(target)
          next unless target.directory?

          target_icon = target.join(format, 'apps', fname)
          next unless target_icon.exist?

          FileUtils.rm_f(target_icon)
          FileUtils.cp(icon.realpath, target_icon, verbose: true)
          remove_pixmap = true
        end
      end
    end

    if remove_pixmap
      (manifest.fetch('paths')['pixmaps'] || {}).to_a.each do |path|
        target_icon = Pathname.new(path).join('wicd-gtk.xpm')

        FileUtils.rm_f(target_icon, verbose: true)
      end
    end

    self
  end

  # Make symlinks for concerned (source) icons
  #
  # @return [self]
  def prepare
    Dir.chdir(flavour_directory) do
      manifest.fetch('preparables').each do |k, values|
        values.each do |v|
          paths = ["#{k}.png", "#{v}.png"]

          FileUtils.ln_sf(paths[0], paths[1], verbose: false)
        end
      end
    end

    self
  end

  # Remove symlinks from sources
  #
  # @return [self]
  def clean
    Dir.chdir(flavour_directory) do
      manifest.fetch('preparables').each do |k, values|
        values.each { |v| FileUtils.remove("#{v}.png") }
      end
    end

    self
  end

  protected

  # @return [Array]
  def get_status_directories_by_formats(formats)
    directories = []

    formats.each do |size|
      get_status_paths(size).each do |k, v|
        directories.push(k.dirname)
      end
    end

    directories.uniq
  end

  def get_status_paths(size, format = 'png')
    size = [size, size].join('x') if size.to_s =~ /^[0-9]{2}$/

    if ['16x16', '22x22'].include?(size)
      get_status_small_paths(size, format)
    else
      get_status_big_paths(size, format)
    end
  end

  # Get paths for icons in 16x16 and 22x22 formats
  #
  # @param [String] size
  # @param [String] format
  # @return [Hash]
  def get_status_small_paths(size = '16x16', format = 'png')
    items = manifest.fetch('statuses').fetch('small')

    make_status_paths(items, size, format)
  end

  # Get paths for icons with size from 32x32 and higher
  #
  # @param [String] size
  # @param [String] format
  # @return [Hash]
  def get_status_big_paths(size = '32x32', format = 'png')
    items = manifest.fetch('statuses').fetch('big')

    make_status_paths(items, size, format)
  end

  def make_status_paths(statuses, size, format)
    result = {}
    Dir.chdir(flavour_directory) do
      (manifest.fetch('paths')['wicd_icons'] || {}).to_a.each do |rootdir|
        rootdir = Pathname.new(rootdir)

        statuses.each do |k, v|
          paths = [
            rootdir.join(size, 'status', '%s.%s' % [k, format]),
            Pathname.new('.').realpath.join('%s.%s' % [(v || k), format])
          ]

          result[paths[0]] = paths[1]
        end
      end
    end

    result
  end
end

Installer.install(ARGV[0]) if __FILE__ == $0
