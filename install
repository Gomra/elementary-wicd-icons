#!/usr/bin/env ruby
# frozen_string_literal: true

# Copyright (C) 2017 Dimitri Arrigoni <dimitri@arrigoni.me>
# License GPLv3+: GNU GPL version 3 or later
# <http://www.gnu.org/licenses/gpl.html>.
# This is free software: you are free to change and redistribute it.
# There is NO WARRANTY, to the extent permitted by law.

require 'fileutils'
require 'pathname'
require 'yaml'

# Installer class
#
# compatible with wicd-gtk version >= 1.7
class Installer
  attr_reader :rootdir
  attr_reader :srcdir
  attr_reader :manifest

  class << self
    def install(style = :light)
      self.new(style || :light).prepare.install.clean
    end
  end

  def initialize(style = :light)
    @rootdir = Pathname.new('/usr/share/wicd/icons/hicolor')
    @srcdir  = Pathname.new(__dir__).join(style.to_s, 'wicd')

    unless @srcdir.directory?
      raise ArgumentError.new('Invalid style: %s' % style)
    end
  end

  def manifest
    @manifest ||= YAML.load_file(Pathname.new(__dir__).join('manifest.yml'))

    @manifest
  end

  def install
     formats = [
      16, 22, # samll
      24, 32, 36, 48, 'original' # big
    ]

     get_status_directories_by_formats(formats).each do | dir|
       FileUtils.mkdir_p(dir, verbose: true)
     end

    formats.each do |size|
      get_status_paths(size).each do |k, v|
        next unless k.exist?

        FileUtils.rm_f(k)
        FileUtils.cp(v, k, verbose: true)
      end
    end

    self
  end

  # Make symlinks for concerned (source) icons
  #
  # @return [self]
  def prepare
    manifest.fetch('preparables').each do |k, values|
      values.each do |v|
        paths = [@srcdir.join('%s.png' % k), @srcdir.join('%s.png' % v)]

        FileUtils.ln_sf(paths[0], paths[1], verbose: false)
      end
    end

    self
  end

  # Remove symlinks from sources
  #
  # @return [self]
  def clean
    preparable_icons.each do |k, values|
      values.each { |v| FileUtils.remove(@srcdir.join('%s.png' % v)) }
    end

    self
  end

  protected

  # @return [Array]
  def get_status_directories_by_formats(formats)
    directories = []

    formats.each do |size|
      get_status_paths(size).each do |k, v|
        directories.push(k.dirname)
      end
    end

    directories.uniq
  end

  def get_status_paths(size, format = 'png')
    size = [size, size].join('x') if size.to_s =~ /^[0-9]{2}$/

    if ['16x16', '22x22'].include?(size)
      get_status_small_paths(size, format)
    else
      get_status_big_paths(size, format)
    end
  end

  # Get paths for icons in 16x16 and 22x22 formats
  #
  # @param [String] size
  # @param [String] format
  # @return [Hash]
  def get_status_small_paths(size = '16x16', format = 'png')
    items = manifest.fetch('statuses').fetch('small')

    make_status_paths(items, size, format)
  end

  # Get paths for icons with size from 32x32 and higher
  #
  # @param [String] size
  # @param [String] format
  # @return [Hash]
  def get_status_big_paths(size = '32x32', format = 'png')
    items = manifest.fetch('statuses').fetch('big')

    make_status_paths(items, size, format)
  end

  def make_status_paths(statuses, size, format)
    result = {}
    statuses.each do |k, v|
      paths = [
        @rootdir.join(size, 'status', '%s.%s' % [k, format]),
        @srcdir.join('%s.%s' % [(v || k), format])
      ]

      result[paths[0]] = paths[1]
    end

    result
  end
end

Installer.install(ARGV[0]) if __FILE__ == $0
