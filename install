#!/usr/bin/env ruby
#
# Compatible using wicd-gtk version >= 1.7

require 'fileutils'
require 'pathname'
require 'pp'

class Installer
  attr_reader :rootdir
  attr_reader :srcdir

  class << self
    def install(style = :light)
      self.new(style || :light).prepare.install.clean
    end
  end

  def initialize(style = :light)
    @rootdir = Pathname.new('/usr/share/wicd/icons/hicolor')
    @srcdir  = Pathname.new(__dir__).join(style.to_s, 'wicd')

    unless @srcdir.directory?
      raise ArgumentError.new('Invalid style: %s' % style)
    end
  end

  def install
     formats = [
      16, 22, # samll
      24, 32, 36, 48, 'original' # big
    ]

     get_status_directories_by_formats(formats).each do | dir|
       FileUtils.mkdir_p(dir, verbose: true)
     end

    formats.each do |size|
      get_status_paths(size).each do |k, v|
        next unless k.exist?

        FileUtils.rm_f(k)
        FileUtils.cp(v, k, verbose: true)
      end
    end

    self
  end

  # Make symlinks for concerned (source) icons
  #
  # @return [self]
  def prepare
    preparable_icons.each do |k, values|
      values.each do |v|
        paths = [@srcdir.join('%s.png' % k), @srcdir.join('%s.png' % v)]

        FileUtils.ln_sf(paths[0], paths[1], verbose: false)
      end
    end

    self
  end

  # Remove symlinks from sources
  #
  # @return [self]
  def clean
    preparable_icons.each do |k, values|
      values.each { |v| FileUtils.remove(@srcdir.join('%s.png' % v)) }
    end

    self
  end

  protected

  # @return [Array]
  def get_status_directories_by_formats(formats)
    directories = []

    formats.each do |size|
      get_status_paths(size).each do |k, v|
        directories.push(k.dirname)
      end
    end

    directories.uniq
  end

  def get_status_paths(size, format = 'png')
    size = [size, size].join('x') if size.to_s =~ /^[0-9]{2}$/

    if ['16x16', '22x22'].include?(size)
      get_status_small_paths(size, format)
    else
      get_status_big_paths(size, format)
    end
  end

  # Get paths for icons in 16x16 and 22x22 formats
  #
  # @param [String] size
  # @param [String] format
  # @return [Hash]
  def get_status_small_paths(size = '16x16', format = 'png')
    items = {
      'signal-25'  => 'low-signal',
      'signal-50'  => 'bad-signal',
      'signal-75'  => 'both-good-signal',
      'signal-100' => 'both-high-signal',
      'bad-signal' => false,
      'bad-signal-lock' => false,
      'both-bad-signal' => false,
      'both-bad-signal-lock' => false,
      'both-good-signal' => false,
      'both-good-signal-lock' => false,
      'both-high-signal' => false,
      'both-high-signal-lock' => false,
      'both-low-signal' => false,
      'both-low-signal-lock' => false,
      'good-signal' => false,
      'good-signal-lock' => false,
      'high-signal' => false,
      'high-signal-lock' => false,
      'idle-bad-signal' => false,
      'idle-bad-signal-lock' => false,
      'idle-good-signal' => false,
      'idle-good-signal-lock' => false,
      'idle-high-signal' => false,
      'idle-high-signal-lock' => false,
      'idle-low-signal' => false,
      'idle-low-signal-lock' => false,
      'low-signal' => false,
      'low-signal-lock' => false,
      'no-signal' => false,
      'receiving-bad-signal' => false,
      'receiving-bad-signal-lock' => false,
      'receiving-good-signal' => false,
      'receiving-good-signal-lock' => false,
      'receiving-high-signal' => false,
      'receiving-high-signal-lock' => false,
      'receiving-low-signal' => false,
      'receiving-low-signal-lock' => false,
      'transmitting-bad-signal' => false,
      'transmitting-bad-signal-lock' => false,
      'transmitting-good-signal' => false,
      'transmitting-good-signal-lock' => false,
      'transmitting-high-signal' => false,
      'transmitting-high-signal-lock' => false,
      'transmitting-low-signal' => false,
      'transmitting-low-signal-lock' => false,
      'wired' => false,
    }

    make_status_paths(items, size, format)
  end

  # Get paths for icons with size from 32x32 and higher
  #
  # @param [String] size
  # @param [String] format
  # @return [Hash]
  def get_status_big_paths(size = '32x32', format = 'png')
    items = {
      'signal-25'  => false,
      'signal-50'  => false,
      'signal-75'  => false,
      'signal-100' => false,
    }

    make_status_paths(items, size, format)
  end

  def make_status_paths(statuses, size, format)
    result = {}
    statuses.each do |k, v|
      paths = [
        @rootdir.join(size, 'status', '%s.%s' % [k, format]),
        @srcdir.join('%s.%s' % [(v || k), format])
      ]

      result[paths[0]] = paths[1]
    end

    result
  end

  def preparable_icons
    {'low-signal' => [
       'both-low-signal-lock',
       'both-low-signal',
       'idle-low-signal-lock',
       'idle-low-signal',
       'low-signal-lock',
       'receiving-low-signal-lock',
       'receiving-low-signal',
       'transmitting-low-signal-lock',
       'transmitting-low-signal',
     ],
     'bad-signal' => [
       'bad-signal-lock',
       'both-bad-signal-lock',
       'both-bad-signal',
       'idle-bad-signal-lock',
       'idle-bad-signal',
       'receiving-bad-signal-lock',
       'receiving-bad-signal',
       'transmitting-bad-signal-lock',
       'transmitting-bad-signal',
     ],
     'good-signal' => [
       'both-good-signal-lock',
       'both-good-signal',
       'good-signal-lock',
       'idle-good-signal-lock',
       'idle-good-signal',
       'receiving-good-signal-lock',
       'receiving-good-signal',
       'transmitting-good-signal-lock',
       'transmitting-good-signal',
     ],
     'high-signal' => [
       'both-high-signal-lock',
       'both-high-signal',
       'high-signal-lock',
       'idle-high-signal-lock',
       'idle-high-signal',
       'receiving-high-signal-lock',
       'receiving-high-signal',
       'transmitting-high-signal-lock',
       'transmitting-high-signal',
     ]
    }
  end
end

Installer.install(ARGV[0]) if __FILE__ == $0
